<?php
/**
 * @file
 *  Install, update, and uninstall functions for Taxonomy Access Control.
 */


/**
 * Implements hook_update_last_removed().
 */
function taxonomy_access_last_removed() {
  return 5;
}


/**
 * Implements hook_install().
 *
 * Adds tables to database: 'taxonomy_access_term', 'taxonomy_access_default'
 */
function taxonomy_access_install() {

  // Default global perms for anonymous and authenticated roles.
  db_query(
    'INSERT INTO {taxonomy_access_default}
    (vocabulary, role, grant_view, grant_update, grant_delete, grant_create, grant_list)
    VALUES
    (:vocabulary, :role, :node_allow, :ignore, :ignore, :term_allow, :term_allow)',
    array(
    ':vocabulary' => TAXONOMY_ACCESS_GLOBAL_DEFAULT,
    ':role' => BACKDROP_ANONYMOUS_ROLE,
    ':node_allow' => TAXONOMY_ACCESS_NODE_ALLOW,
    ':ignore' => TAXONOMY_ACCESS_NODE_IGNORE,
    ':term_allow' => TAXONOMY_ACCESS_TERM_ALLOW,
  )
  );
  db_query(
    'INSERT INTO {taxonomy_access_default}
    (vocabulary, role, grant_view, grant_update, grant_delete, grant_create, grant_list)
    VALUES
    (:vocabulary, :role, :node_allow, :ignore, :ignore, :term_allow, :term_allow)',
    array(
    ':vocabulary' => TAXONOMY_ACCESS_GLOBAL_DEFAULT,
    ':role' => BACKDROP_AUTHENTICATED_ROLE,
    ':node_allow' => TAXONOMY_ACCESS_NODE_ALLOW,
    ':ignore' => TAXONOMY_ACCESS_NODE_IGNORE,
    ':term_allow' => TAXONOMY_ACCESS_TERM_ALLOW,
  )
  );
}

/**
 * Implements hook_schema().
 */
function taxonomy_access_schema() {
  $schema = array();

  $schema['taxonomy_access_term'] = array(
    'description' => 'Identifies which roles may view, update, delete, create, and list nodes with a given term.',
    'fields' => array(
      'tid' => array(
        'description' => 'The term_data.tid this record affects.  Overrides vocabulary default in taxonomy_access_default.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_VOCABULARY_DEFAULT,
      ),
      'role' => array(
        'description' => "The role a user must possess to gain this row's privileges on nodes for this term.",
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 64,
      ),
      'grant_view' => array(
        'description' => 'Whether this role can view nodes with this term. 0=>Ignore, 1=>Allow, 2=>Deny.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_NODE_IGNORE,
      ),
      'grant_update' => array(
        'description' => 'Whether this role can edit nodes with this term. 0=>Ignore, 1=>Allow, 2=>Deny.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_NODE_IGNORE,
      ),
      'grant_delete' => array(
        'description' => 'Whether this role can delete nodes with this term. 0=>Ignore, 1=>Allow, 2=>Deny.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_NODE_IGNORE,
      ),
      'grant_create' => array(
        'description' => 'Whether this role can set this term when adding or editing a node. 0=>No, 1=>Yes.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_TERM_DENY,
      ),
      'grant_list' => array(
        'description' => 'Whether this role can view the name of this term on a node or in category lists. 0=>No, 1=>Yes.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_TERM_ALLOW,
      ),
    ),
    'primary key' => array('tid', 'role'),
  );

  $schema['taxonomy_access_default'] = array(
    'description' => 'Sets vocabulary defaults for which roles may view, update, delete, create, and list nodes with a given term. Overridden by {taxonomy_access_term}.',
    'fields' => array(
      'vocabulary' => array(
        'description' => 'The vocabulary for which this row sets defaults.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_GLOBAL_DEFAULT,
      ),
      'role' => array(
        'description' => "The role a user must possess to gain this row's privileges on nodes for terms in this vocabulary.",
        'type' => 'varchar',
        'not null' => TRUE,
        'default' => '',
        'length' => 64,
      ),
      'grant_view' => array(
        'description' => 'Whether this role can view nodes with terms in this vocabulary. 0=>Ignore, 1=>Allow, 2=>Deny.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_NODE_IGNORE,
      ),
      'grant_update' => array(
        'description' => 'Whether this role can edit nodes with terms in this vocabulary. 0=>Ignore, 1=>Allow, 2=>Deny.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_NODE_IGNORE,
      ),
      'grant_delete' => array(
        'description' => 'Whether this role can delete nodes with terms in this vocabulary. 0=>Ignore, 1=>Allow, 2=>Deny.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_NODE_IGNORE,
      ),
      'grant_create' => array(
        'description' => 'Whether this role can set terms in this vocabulary when adding or editing a node. 0=>No, 1=>Yes.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_TERM_DENY,
      ),
      'grant_list' => array(
        'description' => 'Whether this role can view the name of terms in this vocabulary on a node or in category lists. 0=>No, 1=>Yes.',
        'type' => 'int',
        'unsigned' => TRUE,
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => TAXONOMY_ACCESS_TERM_DENY,
      ),
    ),
    'primary key' => array('vocabulary', 'role'),
  );

  return $schema;
}

/**
 * Implements hook_enable().
 *
 * Housekeeping: while we were away, did you delete any terms/vocabs/roles?
 * 1: Weight this module below the Taxonomy module.
 * 2: Delete ta, tad rows for missing roles.
 * 3: Delete ta rows for missing terms.
 * 4: Delete tad rows for missing vocabs.
 */
function taxonomy_access_enable() {  
  // Weight this module below the Taxonomy module.
  $tax_weight =
    db_query(
      "SELECT weight FROM {system}
      WHERE name = 'taxonomy'"
    )
    ->fetchField()
    ;

  db_update('system')
  ->fields(array('weight' => ($tax_weight + 1)))
  ->condition('name', 'taxonomy_access')
  ->execute();

  // Delete any term configurations not in {taxonomy_term_data}.
  $term_ids =
    db_query(
      "SELECT ta.tid
      FROM {taxonomy_access_term} ta
      LEFT JOIN {taxonomy_term_data} td ON ta.tid = td.tid
      WHERE ta.tid <> :tid AND td.tid IS NULL",
      array(':tid' => TAXONOMY_ACCESS_VOCABULARY_DEFAULT))
    ->fetchCol()
    ;

  // Core flags node access for rebuild on enable, so skip node updates.
  taxonomy_access_delete_term_grants($term_ids, NULL, FALSE);
  unset($term_ids);

  $schema_version = backdrop_get_installed_schema_version('taxonomy_access');
  // For upgrades, only do this if the upgrade process is complete since it
  // involves tables with a schema change.
  if ($schema_version < 7000) {
    // Delete any records for roles not in {roles}.
    $roles = _taxonomy_access_user_roles();
    $config_roles =
      db_query("SELECT DISTINCT role FROM {taxonomy_access_default}")
      ->fetchCol();
    $missing_roles = array_diff($config_roles, array_keys($roles));
  
    // Core flags node access for rebuild on enable, so skip node updates.
    foreach ($missing_roles as $role) {
      taxonomy_access_delete_role_grants($role, FALSE);
    }
    
    // Delete any defaults for vocabularies not in {taxonomy_vocabulary}.
    // TODO
    /*
    $vocab_ids =
      db_query(
        "SELECT tad.vocabulary
        FROM {taxonomy_access_default} tad
        LEFT JOIN {taxonomy_vocabulary} tv ON tad.vocabulary = tv.vocabulary
        WHERE tad.vocabulary <> :vocabulary AND tv.vocabulary IS NULL",
        array(':vocabulary' => TAXONOMY_ACCESS_GLOBAL_DEFAULT))
      ->fetchCol()
      ;
  
    // Core flags node access for rebuild on enable, so skip node updates.
    taxonomy_access_delete_default_grants($vocab_ids, FALSE);
    unset($vocab_ids);
    */
  }
}

/**
 * Update Taxonomy Access Control schema to store role names instead of IDs.
 */
function taxonomy_access_update_1000() {
  db_drop_primary_key('taxonomy_access_term');
  db_change_field('taxonomy_access_term', 'rid', 'role',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'description' => "The role a user must possess to gain this row's privileges on nodes for this term.",
      'default' => '',
      'length' => 64,
      'unsigned' => NULL,
    ),
    array(
      'primary key' => array(
        'role',
        'tid',
      )
    )
  );
  db_query('
    UPDATE {taxonomy_access_term}
    SET role = :role
    WHERE role = :rid
    ', array(':rid' => 1, ':role' => BACKDROP_ANONYMOUS_ROLE));
  db_query('
    UPDATE {taxonomy_access_term}
    SET role = :role
    WHERE role = :rid
    ', array(':rid' => 2, ':role' => BACKDROP_AUTHENTICATED_ROLE));

  db_drop_primary_key('taxonomy_access_default');
  db_change_field('taxonomy_access_default', 'rid', 'role',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'description' => "The role a user must possess to gain this row's privileges on nodes for terms in this vocabulary.",
      'default' => '',
      'length' => 64,
      'unsigned' => NULL,
    ),
  );
  db_change_field('taxonomy_access_default', 'vid', 'vocabulary',
    array(
      'type' => 'varchar',
      'not null' => TRUE,
      'description' => "The vocabulary for which this row sets defaults.",
      'default' => TAXONOMY_ACCESS_GLOBAL_DEFAULT,
      'length' => 255,
      'unsigned' => NULL,
    ),
    array(
      'primary key' => array(
        'vocabulary',
        'role',
      )
    )
  );
  db_query('
    UPDATE {taxonomy_access_default}
    SET role = :role
    WHERE role = :rid
    ', array(':rid' => 1, ':role' => BACKDROP_ANONYMOUS_ROLE));
  db_query('
    UPDATE {taxonomy_access_default}
    SET role = :role
    WHERE role = :rid
    ', array(':rid' => 2, ':role' => BACKDROP_AUTHENTICATED_ROLE));
}
